// server.js (CommonJS)
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken"); // Admin....
require("dotenv").config();


const app = express();
const PORT = process.env.PORT || 3000;

// ---------- CORS ----------
app.use(
  
  cors({
    origin: [
      "http://localhost:3000",
      "https://badminton-mongo.vercel.app",
      "https://badminton-hzwm.vercel.app"
        ],
    methods: ["GET", "POST", "PUT", "PATCH", "DELETE"],
    credentials: true,
  })
);

app.use(express.json());

// ---------- Connect MongoDB ----------
mongoose
  .connect(process.env.MONGODB_URI)
  .then(() => {
    console.log("‚úÖ Connected to MongoDB");
    console.log("üìå Using DB:", mongoose.connection.db.databaseName);
  })
  .catch((err) => console.error("‚ùå MongoDB error:", err.message));


// ---------- User Schema ----------
const userSchema = new mongoose.Schema(
  {
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    phone: { type: String, required: true },
    password: { type: String, required: true }, // hash password
    role: { type: String, enum: ["user", "admin"], default: "user" },
    isDeleted: { type: Boolean, default: false }
  },
  { timestamps: true, collection: "users" }
);

const User = mongoose.model("User", userSchema);


// ---------- Booking Schema ----------
const bookingSchema = new mongoose.Schema(
  {
    user: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true },
    date: { type: String, required: true }, // YYYY-MM-DD
    court: { type: Number, required: true }, // ‡∏Ñ‡∏≠‡∏£‡πå‡∏ï 1-6
    hour: { type: Number, required: true },  // ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡πÄ‡∏ä‡πà‡∏ô 9 = 9:00-10:00
    status: { 
      type: String, 
      enum: ["booked", "arrived", "canceled"], 
      default: "booked"   // ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà ‚Üí ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ = ‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    },
  },
  { timestamps: true, collection: "bookings" }
);

const Booking = mongoose.model("Booking", bookingSchema);


// ---------- Admin Seed ----------
async function createAdmin() {
  const adminEmail = "admin@gmail.com";
  const exists = await User.findOne({ email: adminEmail });
  if (!exists) {
    const hash = await bcrypt.hash("Admin1234!", 10); // ‚úÖ hash password ‡∏Å‡πà‡∏≠‡∏ô
    await User.create({
      name: "Admin",
      email: adminEmail,      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô
      phone: "0812345678",
      password: hash,         // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö hash ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà plain text
      role: "admin",
    });
    console.log("‚úÖ Admin user created");
  }
}
createAdmin();

// ---------- Middleware ----------
function isAdmin(req, res, next) {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ error: "Unauthorized" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "supersecret");

    if (decoded.role !== "admin") {
      return res.status(403).json({ error: "Forbidden: Admin only" });
    }
    next();
  } catch (err) {
    res.status(401).json({ error: "Invalid token" });
  }
}


// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user ‡∏ó‡∏µ‡πà login + ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö
function authRequired(req, res, next) {
  try {
    const token = req.headers.authorization?.split(" ")[1];
    if (!token) return res.status(401).json({ error: "Unauthorized" });

    const decoded = jwt.verify(token, process.env.JWT_SECRET || "supersecret");

    User.findById(decoded.id).then(user => {
      if (!user || user.isDeleted) {
        return res.status(403).json({ error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" });
      }
      req.user = user; // ‡πÄ‡∏Å‡πá‡∏ö user ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô route
      next();
    });
  } catch (err) {
    res.status(401).json({ error: "Invalid token" });
  }
}


// ---------- Admin Routes ----------
app.get("/api/admin/users", isAdmin, async (req, res) => {
  try {
    const users = await User.find({ isDeleted: { $ne: true } }).select("-password");

    const formatted = users.map((u) => ({
      ...u.toObject(),
      createdAt: new Date(u.createdAt).toLocaleString("th-TH", { timeZone: "Asia/Bangkok" }),
      updatedAt: new Date(u.updatedAt).toLocaleString("th-TH", { timeZone: "Asia/Bangkok" }),
    }));

    res.json({ users });
  } catch (err) {
    res.status(500).json({ error: "Failed to fetch users" });
  }
});


app.get("/api/admin/bookings", isAdmin, async (req, res) => {
  try {
    const { date } = req.query; // üëà 1. ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ 'date' ‡∏à‡∏≤‡∏Å query parameter

    // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const filter = {};
    if (date) {
      filter.date = date; // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ date ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    }

    // 3. ‡πÉ‡∏ä‡πâ filter ‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á find()
    const bookings = await Booking.find(filter).populate("user", "name email");

    const formatted = bookings.map((b) => ({
      _id: b._id,
      userName: b.user?.name || "-",
      date: b.date,
      court: b.court,
      hour: b.hour,
      status: b.status,
      createdAt: new Date(b.createdAt).toLocaleString("th-TH", { timeZone: "Asia/Bangkok" }),
      updatedAt: new Date(b.updatedAt).toLocaleString("th-TH", { timeZone: "Asia/Bangkok" })
    }));
    res.json({ bookings: formatted });
  } catch (err) {
    console.error("‚ùå Failed to fetch bookings:", err.message);
    res.status(500).json({ error: "Failed to fetch bookings" });
  }
});

// ‚úèÔ∏è Soft Delete User (Admin only)
app.delete("/api/admin/users/:id", isAdmin, async (req, res) => {
  try {
    const { id } = req.params;

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ id ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πâ‡∏¢
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectId)" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤ isDeleted = true
    const user = await User.findByIdAndUpdate(
      id,
      { isDeleted: true },
      { new: true }
    );

    if (!user) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    res.json({
      message: "‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (Soft Delete)",
      user
    });
  } catch (err) {
    console.error("‚ùå Soft delete error:", err.message);
    res.status(500).json({ error: "Server error", detail: err.message });
  }
});



// ---------- Routes ----------
app.get("/", (req, res) => {
  res.json({ message: "Welcome to the Badminton API!" });
});

// ‚ûï Register
app.post("/api/auth/register", async (req, res) => {
  try {
    const { name, email, phone, password } = req.body;

    if (!name || !email || !phone || !password) {
      return res
        .status(400)
        .json({ error: "‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö name, email, phone, password" });
    }

    const exists = await User.findOne({ email });
    if (exists) {
      return res.status(409).json({ error: "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    const hash = await bcrypt.hash(password, 10);
    const user = await User.create({ name, email, phone, password: hash });

    const { password: _, ...safeUser } = user.toObject();
    return res.status(201).json({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user: safeUser });
  } catch (err) {
    console.error("‚ùå Register error:", err.message);
    return res.status(500).json({ error: "Server error", detail: err.message });
  }
});


// üìÑ Get users
app.get("/api/users", async (req, res) => {
  try {
    const users = await User.find({}, { password: 0 }).lean();
    res.json(users);
  } catch (err) {
    console.error("‚ùå Get users error:", err.message);
    res.status(500).json({ error: "Server error while fetching users" });
  }
});


// üìÑ Login
app.post("/api/auth/login", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
    }

    const user = await User.findOne({ email });

    if (!user) {
      return res.status(401).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ" });
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô Soft Delete ‚Üí ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤
    if (user.isDeleted) {
      return res.status(403).json({ error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(401).json({ error: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const token = jwt.sign(
      { id: user._id, email: user.email, role: user.role },
      process.env.JWT_SECRET || "supersecret",
      { expiresIn: "1d" }
    );

    const { password: _, ...safeUser } = user.toObject();
    res.json({ message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", token, user: safeUser });
  } catch (err) {
    console.error("‚ùå Login error:", err.message);
    res.status(500).json({ error: "Server error", detail: err.message });
  }
});


// üìÑ Get user by id
app.get("/api/users/:id", async (req, res) => {
  try {
    const { id } = req.params;

    // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ id ‡πÄ‡∏õ‡πá‡∏ô ObjectId ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏±‡πâ‡∏¢
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectId)" });
    }

    const user = await User.findById(id, { password: 0 }).lean();

    if (!user) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    res.json(user);
  } catch (err) {
    console.error("‚ùå Get user by id error:", err.message);
    res.status(500).json({ error: "Server error", detail: err.message });
  }
});

// ‚úèÔ∏è Update user by id
app.put("/api/users/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const { name, phone } = req.body;

    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ObjectId)" });
    }

    const user = await User.findByIdAndUpdate(
      id,
      { name, phone },
      { new: true, runValidators: true, projection: { password: 0 } }
    );

    if (!user) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    res.json({ message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß", user });
  } catch (err) {
    console.error("‚ùå Update user error:", err.message);
    res.status(500).json({ error: "Server error", detail: err.message });
  }
});


// ---------- Profile Schema ----------
const profileSchema = new mongoose.Schema(
  {
    user: { type: mongoose.Schema.Types.ObjectId, ref: "User", required: true, unique: true },
    emergencyName: { type: String, default: "" },   // ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
    emergencyPhone: { type: String, default: "" },  // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
  },
  { timestamps: true, collection: "profiles" }
);

const Profile = mongoose.model("Profile", profileSchema);




// ---------- Booking Routes ----------

// ‚úÖ ‡∏î‡∏π‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
app.get("/api/bookings/taken", async (req, res) => {
  try {
    const { date } = req.query;
    if (!date) return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á date" });

    const bookings = await Booking.find({ date });
    const taken = bookings.map((b) => `${b.court}:${b.hour}`);
    res.json({ taken });
  } catch (err) {
    console.error("‚ùå Get taken error:", err.message);
    res.status(500).json({ error: "Server error" });
  }
});

// ‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏ô‡∏≤‡∏° (‡∏ï‡πâ‡∏≠‡∏á login)
app.post("/api/bookings", authRequired, async (req, res) => {
  const { date, court, hour, note } = req.body;
  const userId = req.user._id; // ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token

  if (!date || court == null || hour == null) {
    return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á date, court, hour" });
  }

  const exists = await Booking.findOne({ date, court, hour });
  if (exists) {
    return res.status(409).json({ error: "‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß" });
  }

  const booking = await Booking.create({
    user: userId,
    date,
    court,
    hour,
    note,
    status: "booked"
  });

  res.status(201).json({ message: "‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", booking });
});


// ‚úÖ ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á user ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô
app.get("/api/bookings/my/:userId/:date", async (req, res) => {
  try {
    const { userId, date } = req.params;

    if (!date) {
      return res.status(400).json({ error: "‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á date" });
    }

    const myBookings = await Booking.find({ user: userId, date })
      .sort({ hour: 1 });

    const mine = myBookings.map(b => `${b.court}:${b.hour}`);
    res.json({ mine });
  } catch (err) {
    console.error("‚ùå My bookings error:", err.message);
    res.status(500).json({ error: "Server error" });
  }
});



// POST ‡∏´‡∏£‡∏∑‡∏≠ PUT profile
app.post("/api/profile/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const { emergencyName, emergencyPhone } = req.body;

    const profile = await Profile.findOneAndUpdate(
      { user: userId },
      { emergencyName, emergencyPhone },
      { new: true, upsert: true } // upsert = ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ profile ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    );

    res.json({ message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", profile });
  } catch (err) {
    console.error("‚ùå Profile update error:", err.message);
    res.status(500).json({ error: "Server error" });
  }
});

app.get("/api/profile/:userId", async (req, res) => {
  try {
    const { userId } = req.params;
    const profile = await Profile.findOne({ user: userId });

    if (!profile) {
      return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå" });
    }

    const formatted = {
      ...profile.toObject(),
      createdAt: new Date(profile.createdAt).toLocaleString("th-TH", { timeZone: "Asia/Bangkok" }),
      updatedAt: new Date(profile.updatedAt).toLocaleString("th-TH", { timeZone: "Asia/Bangkok" }),
    };

    res.json(profile);
  } catch (err) {
    console.error("‚ùå Profile get error:", err.message);
    res.status(500).json({ error: "Server error" });
  }
});


// ‚úÖ Update booking status (Admin only)
app.put("/api/admin/bookings/:id/status", isAdmin, async (req, res) => {
¬† try {
¬† ¬† const { id } = req.params;
¬† ¬† const { status } = req.body;

¬† ¬† if (!["booked", "arrived", "canceled"].includes(status)) {
¬† ¬† ¬† return res.status(400).json({ error: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
¬† ¬† }

¬† ¬† const booking = await Booking.findByIdAndUpdate(
¬† ¬† ¬† id,
¬† ¬† ¬† { status },
¬† ¬† ¬† { new: true }
¬† ¬† ).populate("user", "name email");

¬† ¬† if (!booking) {
¬† ¬† ¬† return res.status(404).json({ error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á" });
¬† ¬† }

¬† ¬† res.json({ message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢", booking });
¬† } catch (err) {
¬† ¬† console.error("‚ùå Update booking status error:", err.message);
¬† ¬† res.status(500).json({ error: "Server error" });
¬† }
});


// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á user
app.get("/api/bookings/user/:userId", async (req, res) => {
  try {
    const { userId } = req.params;

    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ error: "ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const bookings = await Booking.find({ user: userId })
      .sort({ date: -1, hour: 1 }); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô

    res.json({ bookings });
  } catch (err) {
    console.error("‚ùå User bookings error:", err.message);
    res.status(500).json({ error: "Server error" });
  }
});



// ---------- Start Server ----------
app.listen(PORT, () => {
  console.log(`üöÄ Server running at http://localhost:${PORT}`);
});
