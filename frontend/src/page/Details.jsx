// src/Details.jsx
import React, { useEffect, useLayoutEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";

const API = process.env.REACT_APP_API_URL || "https://badminton-hzwm.onrender.com";

/** ===== CONFIG ===== */
const OPEN_HOUR = 9;
const CLOSE_HOUR = 21; // ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 20:00‚Äì21:00
const HOURS = Array.from({ length: CLOSE_HOUR - OPEN_HOUR }, (_, i) => OPEN_HOUR + i);
const COURTS = [1, 2, 3, 4, 5, 6];
const PRICE_PER_HOUR = 80;

/** THEME (‡πÇ‡∏ó‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô) */
const colors = {
  primary: "#34d399",
  primaryDark: "#10b981",
  primarySoft: "#ecfdf5",
  accent: "#22c55e",
  ink: "#0f172a",
  muted: "#64748b",
  line: "#e5e7eb",
  lineStrong: "#d1d5db",
  card: "#ffffff",
  bg: "#f6fef8",
  danger: "#ef4444",
  success: "#16a34a",
  taken: "#eef2f4",
};

/** ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á API ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì */
const ENDPOINTS = {
  taken: (date) => `${API}/api/bookings/taken?date=${encodeURIComponent(date)}`,
  create: `${API}/api/bookings`,
};

const toDateKey = (d = new Date()) => d.toISOString().split("T")[0];
const msUntilNextMidnight = () => {
  const now = new Date();
  const next = new Date(now);
  next.setDate(now.getDate() + 1);
  next.setHours(0, 0, 0, 0);
  return next.getTime() - now.getTime();
};

export default function Details() {
  const navigate = useNavigate();

  // üîí ‡∏ß‡∏±‡∏ô ‚Äú‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‚Äù ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  const [dateKey, setDateKey] = useState(() => toDateKey());
  const [taken, setTaken] = useState([]);       // ["1:9","2:10"]
  const [selected, setSelected] = useState([]); // [{court, hour}]
  const [note, setNote] = useState("");
  const [loading, setLoading] = useState(false);
  const [msg, setMsg] = useState("");

  // ‚úÖ ‡∏™‡πÄ‡∏Å‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡πâ ‚Äú‡∏û‡∏≠‡∏î‡∏µ‡∏à‡∏≠‚Äù
  const [scale, setScale] = useState(1);
  const viewportRef = useRef(null);  // ‡πÇ‡∏ã‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤)
  const contentRef = useRef(null);   // ‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á‡∏Å‡πà‡∏≠‡∏ô scale

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì scale ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î/‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á/‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
  useLayoutEffect(() => {
    const calc = () => {
      const vp = viewportRef.current;
      const ct = contentRef.current;
      if (!vp || !ct) return;

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏õ‡πá‡∏ô 1 ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î ‚Äú‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‚Äù ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πÄ‡∏Å‡∏•
      ct.style.transform = "scale(1)";
      ct.style.width = "auto";

      const pad = 8; // ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏£‡∏¥‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
      const availW = Math.max(320, window.innerWidth - pad * 2);
      const availH = Math.max(320, window.innerHeight - pad * 2);

      const rect = ct.getBoundingClientRect(); // ‡∏Ç‡∏ô‡∏≤‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏™‡πÄ‡∏Å‡∏•
      const neededW = rect.width;
      const neededH = rect.height;

      let s = Math.min(availW / neededW, availH / neededH, 1);
      // ‡∏õ‡∏±‡∏î‡∏™‡πÄ‡∏Å‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î jitter
      s = Math.max(0.1, Math.min(1, Number(s.toFixed(3))));

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏• + ‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏™‡πÄ‡∏Å‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå
      ct.style.transform = `scale(${s})`;
      ct.style.transformOrigin = "top left";
      ct.style.width = s < 1 ? `${100 / s}%` : "auto";

      setScale(s);
      // ‡∏õ‡∏¥‡∏î‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤
      document.documentElement.style.overflow = "hidden";
      document.body.style.overflow = "hidden";
    };

    calc();
    const onResize = () => calc();

    // ‡πÉ‡∏ä‡πâ ResizeObserver ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏≠‡∏á
    const ro = new ResizeObserver(calc);
    if (contentRef.current) ro.observe(contentRef.current);

    window.addEventListener("resize", onResize);
    return () => {
      window.removeEventListener("resize", onResize);
      ro.disconnect();
      document.documentElement.style.overflow = "";
      document.body.style.overflow = "";
    };
  }, []);

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô
  useEffect(() => {
    const tick = () => {
      const today = toDateKey();
      setDateKey((prev) => (prev !== today ? today : prev));
    };
    tick();
    const first = setTimeout(() => {
      tick();
      const everyDay = setInterval(tick, 24 * 60 * 60 * 1000);
      (window.__dailyTimer__ = everyDay);
    }, msUntilNextMidnight());
    return () => {
      clearTimeout(first);
      if (window.__dailyTimer__) {
        clearInterval(window.__dailyTimer__);
        delete window.__dailyTimer__;
      }
    };
  }, []);

  // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≠‡∏á
  useEffect(() => {
    fetch(ENDPOINTS.taken(dateKey))
      .then((res) => res.json())
      .then((data) => setTaken(data.taken || []))
      .catch((err) => console.error("Load taken error:", err));
  }, [dateKey]);

  const formatHourLabel = (h) => `${h.toString().padStart(2, "0")}:00 - ${h + 1}:00`;
  const isTaken = (c, h) => taken.includes(`${c}:${h}`);
  const isSelected = (c, h) => selected.some((s) => s.court === c && s.hour === h);

  const toggleCell = (c, h) => {
    if (isTaken(c, h)) return;
    setSelected((prev) =>
      prev.some((s) => s.court === c && s.hour === h)
        ? prev.filter((s) => !(s.court === c && s.hour === h))
        : [...prev, { court: c, hour: h }]
    );
  };

  const handleConfirm = async () => {
    setLoading(true);
    setMsg("");
    try {
      const user = JSON.parse(localStorage.getItem("auth:user") || "{}");
      if (!user?._id) {
        setMsg("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏≠‡∏á");
        setLoading(false);
        return;
      }
      for (const s of selected) {
        const res = await fetch(ENDPOINTS.create, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            userId: user._id,
            date: dateKey,
            court: s.court,
            hour: s.hour,
            note,
          }),
        });
        const data = await res.json();
        if (!res.ok) {
          setMsg(`‚ùå ‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏ï ${s.court} ‡πÄ‡∏ß‡∏•‡∏≤ ${formatHourLabel(s.hour)} ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${data.error || "unknown"}`);
          setLoading(false);
          return;
        }
      }
      setMsg("‚úÖ ‡∏à‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      setSelected([]);
      setNote("");
      const res2 = await fetch(ENDPOINTS.taken(dateKey));
      const data2 = await res2.json();
      setTaken(data2.taken || []);
    } catch (err) {
      console.error("Booking error:", err);
      setMsg("‚ùå Server error");
    } finally {
      setLoading(false);
    }
  };

  const goHome = () => {
    try { navigate("/"); } catch { window.location.href = "/"; }
  };

  return (
    <div ref={viewportRef} style={ui.page}>
      {/* ‚úÖ ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡∏à‡∏£‡∏¥‡∏á ‚Äî ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡πÄ‡∏Å‡∏•‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏à‡∏≠‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ */}
      <div ref={contentRef} style={ui.contentWrap}>
        <div style={ui.container}>
          {/* ‡∏ã‡πâ‡∏≤‡∏¢: ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */}
          <section style={ui.left}>
            <div style={ui.toolbar}>
              <div style={{ display: "flex", alignItems: "center", gap: 8, flexWrap: "wrap" }}>
                <button type="button" onClick={goHome} style={ui.backBtn} title="‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å">
                  ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                </button>
                <div style={{ display: "flex", flexDirection: "column", gap: 6 }}>
                  <label htmlFor="date" style={ui.labelSm}>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)</label>
                  <input
                    id="date"
                    type="date"
                    value={dateKey}
                    disabled
                    readOnly
                    title="‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô"
                    style={{ ...ui.dateInput, background: colors.primarySoft, borderColor: colors.primary }}
                  />
                  <span style={ui.badgeNote}>‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‚Äú‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‚Äù ‚Ä¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á‡∏Ñ‡∏∑‡∏ô</span>
                </div>
              </div>

              {/* Legend ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ */}
              <div style={ui.legendWrap} aria-hidden>
                <span style={ui.legendItem}><span style={ui.dotFree} /> ‡∏ß‡πà‡∏≤‡∏á</span>
                <span style={ui.legendItem}><span style={ui.dotPicked} /> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß</span>
                <span style={ui.legendItem}><span style={ui.dotTaken} /> ‡πÄ‡∏ï‡πá‡∏°</span>
              </div>
            </div>

            {/* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏ï x ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‚Äî ‡∏Ñ‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ wrapper ‡∏™‡πÄ‡∏Å‡∏•‡∏•‡∏á/‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏à‡∏≠ */}
            <div style={ui.tableFrame}>
              <div style={ui.headerRow}>
                <div style={{ ...ui.headerCell, width: 140, textAlign: "left" }}>‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤</div>
                {COURTS.map((c) => (
                  <div key={c} style={ui.headerCell}>‡∏Ñ‡∏≠‡∏£‡πå‡∏ï {c}</div>
                ))}
              </div>

              {/* body ‡∏Ç‡∏ô‡∏≤‡∏î ‚Äú‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‚Äù (‡πÑ‡∏°‡πà‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå‡πÄ‡∏≠‡∏á) */}
              <div role="table" aria-label="‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏≠‡∏£‡πå‡∏ï‡πÅ‡∏ö‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏±‡∏ô" style={ui.bodyGrid}>
                {HOURS.map((h, idx) => (
                  <div key={h} role="row" style={{ ...ui.row, ...(idx % 2 === 1 ? ui.rowAlt : null) }}>
                    <div role="cell" style={{ ...ui.timeCell }}>{formatHourLabel(h)}</div>
                    {COURTS.map((c) => {
                      const takenCell = isTaken(c, h);
                      const picked = isSelected(c, h);
                      const label = takenCell ? "‡πÄ‡∏ï‡πá‡∏°" : picked ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß" : "‡∏ß‡πà‡∏≤‡∏á";
                      return (
                        <button
                          key={`${c}:${h}`}
                          onClick={() => toggleCell(c, h)}
                          disabled={takenCell}
                          aria-pressed={picked}
                          aria-label={`‡∏Ñ‡∏≠‡∏£‡πå‡∏ï ${c} ‡πÄ‡∏ß‡∏•‡∏≤ ${formatHourLabel(h)}: ${label}`}
                          style={{
                            ...ui.cellBtn,
                            ...(takenCell ? ui.cellTaken : picked ? ui.cellPicked : ui.cellFree),
                          }}
                        >
                          <span style={ui.statusPill(takenCell, picked)}>{label}</span>
                        </button>
                      );
                    })}
                  </div>
                ))}
              </div>
            </div>
          </section>

          {/* ‡∏Ç‡∏ß‡∏≤: ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á */}
          <aside style={ui.right}>
            <div style={ui.card}>
              <h2 style={ui.cardTitle}>‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á</h2>
              <div style={ui.summaryRow}><span>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</span><b>{dateKey}</b></div>
              <div style={ui.summaryRow}><span>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span><b>{selected.length} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</b></div>
              <div style={ui.summaryRow}><span>‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á</span><b>{PRICE_PER_HOUR.toLocaleString()} ‡∏ö‡∏≤‡∏ó</b></div>
              <div style={{ ...ui.summaryRow, borderTop: `1px dashed ${colors.line}`, paddingTop: 10, marginTop: 6 }}>
                <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span><b style={{ color: colors.accent }}>{(selected.length * PRICE_PER_HOUR).toLocaleString()} ‡∏ö‡∏≤‡∏ó</b>
              </div>

              <div style={{ marginTop: 12 }}>
                <label htmlFor="note" style={ui.labelSm}>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                <textarea
                  id="note"
                  value={note}
                  onChange={(e) => setNote(e.target.value)}
                  placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≠‡∏£‡πå‡∏ï‡∏ï‡∏¥‡∏î‡∏ú‡∏ô‡∏±‡∏á / ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡πÄ‡∏û‡∏¥‡πà‡∏°"
                  style={ui.textarea}
                  rows={3}
                />
              </div>

              <button
                onClick={handleConfirm}
                disabled={loading || !selected.length}
                style={{ ...ui.confirmBtn, opacity: loading ? 0.75 : 1 }}
              >
                {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô..." : "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á"}
              </button>

              {!!selected.length && (
                <>
                  <div style={{ marginTop: 14, fontSize: 13, color: colors.muted }}>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</div>
                  <ul style={ui.selectedList}>
                    {selected
                      .slice()
                      .sort((a, b) => a.court - b.court || a.hour - b.hour)
                      .map((s, idx) => (
                        <li key={idx} style={ui.selectedItem}>
                          <span>‡∏Ñ‡∏≠‡∏£‡πå‡∏ï {s.court}</span>
                          <span>{formatHourLabel(s.hour)}</span>
                          <button
                            onClick={() => toggleCell(s.court, s.hour)}
                            style={ui.removeBtn}
                            title="‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å"
                          >
                            ‚úï
                          </button>
                        </li>
                      ))}
                  </ul>
                </>
              )}

              {msg && <div style={ui.message}>{msg}</div>}
            </div>
          </aside>
        </div>
      </div>
    </div>
  );
}

/** ===== UI (‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πÄ‡∏Å‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏à‡∏≠) ===== */
const ui = {
  page: {
    minHeight: "100vh",
    background: colors.bg,
    color: colors.ink,
    fontFamily:
      'ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, "Noto Sans Thai", sans-serif',
    padding: 8,
    overflow: "hidden", // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏™‡∏Å‡∏£‡∏≠‡∏•‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏ô‡πâ‡∏≤
  },

  // ‡∏ï‡∏±‡∏ß‡∏´‡πà‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏ñ‡∏π‡∏Å scale ‡πÅ‡∏ö‡∏ö dynamic ‡∏î‡πâ‡∏ß‡∏¢ JS
  contentWrap: {
    transform: "scale(1)",
    transformOrigin: "top left",
    width: "auto", // ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 100/scale% ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πÄ‡∏Å‡∏•‡∏•‡∏á
  },

  container: {
    // ‡∏Ç‡∏ô‡∏≤‡∏î "‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö" ‚Äî ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡πÄ‡∏Å‡∏•‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏î‡∏π‡∏ö‡∏≤‡∏•‡∏≤‡∏ô‡∏ã‡πå
    width: 1200,
    margin: "0 auto",
    display: "grid",
    gridTemplateColumns: "1fr 340px",
    gap: 16,
  },

  /* Left */
  left: { minWidth: 0 },
  toolbar: {
    display: "flex",
    alignItems: "flex-end",
    justifyContent: "space-between",
    gap: 12,
    marginBottom: 10,
    flexWrap: "wrap",
  },
  backBtn: {
    padding: "8px 12px",
    borderRadius: 10,
    border: `1px solid ${colors.lineStrong}`,
    background: "#fff",
    cursor: "pointer",
    fontWeight: 700,
  },
  labelSm: { display: "block", fontSize: 13, fontWeight: 700, marginBottom: 6, color: colors.muted },
  badgeNote: {
    display: "inline-block",
    fontSize: 12,
    padding: "6px 10px",
    borderRadius: 999,
    background: colors.primarySoft,
    color: colors.primaryDark,
    border: `1px solid ${colors.primary}`,
    width: "fit-content",
  },
  dateInput: {
    padding: "10px 12px",
    border: `1px solid ${colors.line}`,
    borderRadius: 10,
    background: "#fff",
    fontSize: 14,
    outline: "none",
  },

  /* Legend */
  legendWrap: {
    display: "flex",
    alignItems: "center",
    gap: 14,
    background: "#fff",
    padding: "8px 12px",
    borderRadius: 999,
    border: `1px solid ${colors.line}`,
    boxShadow: "0 4px 18px rgba(2,6,12,.05)",
    whiteSpace: "nowrap",
  },
  legendItem: { display: "inline-flex", alignItems: "center", gap: 8, fontSize: 13, color: colors.muted },
  dotFree:  { display: "inline-block", width: 12, height: 12, borderRadius: 999, background: "#fff", border: `1px solid ${colors.lineStrong}` },
  dotPicked:{ display: "inline-block", width: 12, height: 12, borderRadius: 999, background: colors.primary, border: `1px solid ${colors.primaryDark}` },
  dotTaken: { display: "inline-block", width: 12, height: 12, borderRadius: 999, background: colors.taken, border: `1px solid ${colors.lineStrong}` },

  /* ‡∏Å‡∏£‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
  tableFrame: {
    background: colors.card,
    border: `1px solid ${colors.lineStrong}`,
    borderRadius: 16,
    boxShadow: "0 12px 30px rgba(2,6,12,0.06)",
    overflow: "hidden",
  },
  headerRow: {
    display: "grid",
    gridTemplateColumns: `140px repeat(${COURTS.length}, 1fr)`,
    borderBottom: `1px solid ${colors.lineStrong}`,
    background: colors.primarySoft,
    boxShadow: "inset 0 -1px 0 " + colors.lineStrong,
  },
  headerCell: {
    padding: "12px 10px",
    fontSize: 13,
    fontWeight: 900,
    textAlign: "center",
    borderLeft: `1px solid ${colors.lineStrong}`,
    color: colors.primaryDark,
    letterSpacing: 0.2,
  },

  // ‡∏ö‡∏≠‡∏î‡∏µ‡πâ: ‡πÄ‡∏£‡∏≤ ‚Äú‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‚Äù ‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ wrapper ‡∏™‡πÄ‡∏Å‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏à‡∏≠
  bodyGrid: {
    display: "grid",
    gridAutoFlow: "row",
  },
  row: {
    display: "grid",
    gridTemplateColumns: `140px repeat(${COURTS.length}, 1fr)`,
    borderTop: `1px solid ${colors.line}`,
  },
  rowAlt: { background: "#fbfdfc" },
  timeCell: {
    padding: "12px 10px",
    fontSize: 13,
    textAlign: "left",
    background: "#ffffff",
    borderRight: `1px solid ${colors.lineStrong}`,
    fontWeight: 700,
  },

  cellBtn: {
    padding: "14px 8px",
    fontSize: 13,
    background: "#fff",
    border: "none",
    borderLeft: `1px solid ${colors.line}`,
    cursor: "pointer",
    transition: "transform .06s ease, box-shadow .12s ease, background .12s ease",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    outline: "none",
  },
  cellFree: { background: "#fff" },
  cellPicked: {
    background: colors.primarySoft,
    boxShadow: "inset 0 0 0 2px " + colors.primary,
  },
  cellTaken: {
    background: colors.taken,
    color: "#9ca3af",
    cursor: "not-allowed",
  },

  statusPill: (isTaken, isPicked) => ({
    fontSize: 12,
    fontWeight: 800,
    padding: "6px 10px",
    borderRadius: 999,
    border: `1px solid ${isTaken ? colors.lineStrong : isPicked ? colors.primaryDark : colors.lineStrong}`,
    background: isTaken ? "#f1f5f9" : isPicked ? "#dcfce7" : "#ffffff",
    color: isTaken ? "#94a3b8" : isPicked ? colors.success : colors.ink,
    letterSpacing: 0.2,
  }),

  /* Right */
  right: { minWidth: 0 },
  card: {
    background: colors.card,
    border: `1px solid ${colors.line}`,
    borderRadius: 16,
    boxShadow: "0 12px 30px rgba(2,6,12,0.06)",
    padding: 14,
    position: "sticky",
    top: 0,
  },
  cardTitle: { margin: 0, fontSize: 18, fontWeight: 900, color: colors.primaryDark },
  summaryRow: {
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    fontSize: 14,
    marginTop: 10,
  },
  textarea: {
    width: "100%",
    padding: "10px 14px",
    borderRadius: 12,
    border: `1px solid ${colors.line}`,
    outline: "none",
    fontSize: 14,
    lineHeight: "1.5",
    background: "#fff",
    resize: "vertical",
    boxSizing: "border-box",
  },
  confirmBtn: {
    width: "100%",
    marginTop: 12,
    padding: "12px 14px",
    background: colors.primaryDark,
    color: "#fff",
    border: "none",
    borderRadius: 12,
    cursor: "pointer",
    fontWeight: 800,
    fontSize: 15,
  },
  selectedList: {
    marginTop: 8,
    listStyle: "none",
    padding: 0,
    borderTop: `1px solid ${colors.line}`,
  },
  selectedItem: {
    display: "grid",
    gridTemplateColumns: "auto 1fr auto",
    gap: 8,
    alignItems: "center",
    padding: "8px 0",
    fontSize: 13,
    borderBottom: `1px dashed ${colors.line}`,
  },
  removeBtn: {
    background: "transparent",
    border: `1px solid ${colors.line}`,
    borderRadius: 8,
    padding: "2px 8px",
    cursor: "pointer",
  },
  message: {
    marginTop: 10,
    fontSize: 14,
    textAlign: "center",
    color: colors.accent,
  },
};
